@page "/tasks/{TaskID:int}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Stroom.Client.Services
@using Stroom.Shared
@using Stroom.Shared.Models
@using Stroom.Client.Components
@using static Stroom.Shared.Enums.TaskPropertiesEnums
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ITasksService TasksService
@inject ITimeEntriesService TimeEntriesService

<style>
    .href-text {
        font-weight: 500;
        color: blue;
    }

    .href-text:hover {
        text-decoration: underline;
    }
</style>

@if(Task != null)
{
<PageTitle>@Task.Name</PageTitle>

<div style="@(!IsEditFormOpen ? "visibility: hidden; width: 0; height: 0;" : "")">
    <TaskForm @bind-Task="Task" />
    <MudStack Row="true" Class="mt-4">
        <MudButton OnClick="CancelEditFormChanges" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Error">Cancel</MudButton>
        <MudButton OnClick="SaveEditFormChanges" StartIcon="@Icons.Material.Filled.Save" Color="Color.Primary">Save</MudButton>
    </MudStack>
</div>

<div style="@(!IsHoursFormOpen ? "visibility: hidden; width: 0; height: 0;" : "")">
    <MudPaper Outlined="true" Class="pa-4">
        <MudDatePicker Required="true" @bind-Date="NewTimeEntry.Date"  Label="Date" DisableToolbar="true" />
        <MudTooltip Color="Color.Transparent" Placement="Placement.Bottom">
            <ChildContent>
                <MudNumericField Required="true" @bind-Value="NewTimeEntry.Hours" Label="Hours" Variant="Variant.Text" Min="1" Max="99999" />
            </ChildContent>
            <TooltipContent>
                <MudAlert Severity="Severity.Info" Dense="true">Tip: Use shift + mouse wheel to adjust the number</MudAlert>
            </TooltipContent>
        </MudTooltip>
    </MudPaper>
    <MudStack Row="true" Class="mt-4">
        <MudButton OnClick="CancelHoursFormChanges" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Error">Cancel</MudButton>
        <MudButton OnClick="SaveHoursFormChanges" StartIcon="@Icons.Material.Filled.Save" Color="Color.Primary">Save</MudButton>
    </MudStack>
</div>

<MudStack Style="@((IsEditFormOpen || IsHoursFormOpen) ? "visibility: hidden;" : "")">
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.subtitle2"><a class=".href-text" href=@($"projects/{Task.Project.ProjectID}")>@Task.Project.Name</a> / Task ID - @Task.TaskID</MudText>
        <span>
            <MudText Class="d-inline" Style="font-weight: 500;" Typo="Typo.h5">@Task.Name</MudText>
            <div style="float: right;">
                <MudButton OnClick="ToggleOpenEditForm">Edit</MudButton>
                <MudButton OnClick="ToggleOpenHoursForm">Add hours</MudButton>
            </div>
        </span>
        <MudDivider Class="my-3"/>
        <MudStack Row="true" Spacing="4">
            <MudItem Style="width: 40%; float: left;">
                <MudStack Spacing="4">
                    <MudStack Row="true" Spacing="8">
                        <MudText Typo="Typo.body2" Style="@($"color:{Colors.Grey.Lighten1}; min-width: 105px;")">Status:</MudText>
                        <MudText Typo="Typo.body2">@Task.Status</MudText>
                    </MudStack>
                    <MudStack Row="true" Spacing="8">
                        <MudText Typo="Typo.body2" Style="@($"color:{Colors.Grey.Lighten1}; min-width: 105px;")">Priority:</MudText>
                        <MudText Typo="Typo.body2" >@Task.Priority</MudText>
                    </MudStack>
                    <MudStack Row="true" Spacing="8">
                        <MudText Typo="Typo.body2" Style="@($"color:{Colors.Grey.Lighten1}; min-width: 105px;")">Assignee:</MudText>
                        <MudText Typo="Typo.body2">@Task.Assignee?.FullName</MudText>
                    </MudStack>
                </MudStack>
            </MudItem>
            <MudItem Style="width: 60%; float: right;">
                <MudStack Spacing="4">
                    <MudStack Row="true" Spacing="8">
                        <MudText Typo="Typo.body2" Style="@($"color:{Colors.Grey.Lighten1}; min-width: 105px;")">Submition Date:</MudText>
                        <MudText Typo="Typo.body2">@Task.SubmitionDate?.ToShortDateString()</MudText>
                    </MudStack>
                    <MudStack Row="true" Spacing="8">
                        <MudText Typo="Typo.body2" Style="@($"color:{Colors.Grey.Lighten1}; min-width: 105px;")">Due Date:</MudText>
                        <MudText Typo="Typo.body2">@Task.DueDate?.ToShortDateString()</MudText>
                    </MudStack>
                    <MudStack Row="true" Spacing="8">
                        <MudText Typo="Typo.body2" Style="@($"color:{Colors.Grey.Lighten1}; min-width: 105px;")">Estimated Time:</MudText>
                        <MudText Typo="Typo.body2">@Task.EstimatedTime h</MudText>
                    </MudStack> 
                    <MudStack Row="true" Spacing="8">
                        <MudText Typo="Typo.body2" Style="@($"color:{Colors.Grey.Lighten1}; min-width: 105px;")">Worked Time:</MudText>
                        <MudText Typo="Typo.body2"><a href="@($"tasks/{TaskID}/hours")">@Task.WorkedTime h</a></MudText>
                    </MudStack>
                </MudStack>
            </MudItem>
        </MudStack>

        <MudDivider Class="my-3" />
        <MudStack>
            <MudText Typo="Typo.body2" Style="@($"color:{Colors.Grey.Lighten1}; min-width: 105px;")">Description:</MudText>
            <MudText Typo="Typo.body2">@Task.Description h</MudText>
        </MudStack>
    </MudPaper>

    <MudPaper>
        <MudTextField Class="d-inline" ErrorText="Comment cannot be empty" Error="@NewCommentHasErrors" @bind-Value="NewCommentText" Immediate="true" Label="Comment" Lines="4" />
    </MudPaper>

    <button class="btn btn-primary" @onclick="AddComment">Add comment</button>

    <button class="btn btn-primary" @onclick="FlipSortDirection">New at the <b>@(OrderCommentsDescending ? "Top" : "Bottom")</b></button>
    @for (var i = 0; i < Task.Comments.Count; i++)
    {
        var comment = Task.Comments[i];
        var commentNumber = OrderCommentsDescending ? Task.Comments.Count - i : i + 1;
        <MudPaper Class="pa-4">
            <span class="width: 100%;">
                <MudText Typo="Typo.caption">#@commentNumber @comment.User.Name @comment.User.Surname</MudText>
                <MudText Typo="Typo.caption" Style="float: right;">@comment.TimeStamp.ToString("dd-MM-yyyy H:mm")</MudText>
            </span>
            <MudText Typo="Typo.body1">@comment.Comment</MudText>
        </MudPaper>
    }
</MudStack>
}

@code {
    [Parameter] public int TaskID { get; set; }

    private TaskDto Task { get; set; }
    private TimeEntry NewTimeEntry { get; set; } = new TimeEntry();

    private bool IsEditFormOpen { get; set; } = false;
    private bool IsHoursFormOpen { get; set; } = false;
    private bool NewCommentHasErrors { get; set; } = false;
    private bool OrderCommentsDescending { get; set; } = true;

    private string NewCommentText;
    private SortDirection CommentsSortDirection => OrderCommentsDescending ? SortDirection.Descending : SortDirection.Ascending;

    protected override async Task OnInitializedAsync()
    {
        var task = await TasksService.GetAsync(TaskID);
        if(task is null) NavigationManager.NavigateTo("error");

        Task = task;
    }

    private void FlipSortDirection(){
        OrderCommentsDescending = !OrderCommentsDescending;
        Task.Comments = Task.Comments.OrderByDirection(CommentsSortDirection, userComment => userComment.TimeStamp).ToList();
    }

    private void ToggleOpenEditForm() 
    {
        IsEditFormOpen = !IsEditFormOpen;
        if (!IsEditFormOpen) NewCommentHasErrors = false;
    }

    private void ToggleOpenHoursForm() 
    {
        IsHoursFormOpen = !IsHoursFormOpen;
    }

    private void CancelEditFormChanges()
    {
        ToggleOpenEditForm();
    }

    private void SaveEditFormChanges()
    {
        TasksService.Update(Task);
        ToggleOpenEditForm();
    }

    private void CancelHoursFormChanges()
    {
        ToggleOpenHoursForm();
    }

    private void SaveHoursFormChanges()
    {
        if(NewTimeEntry != null && NewTimeEntry.Date != null)
        {
            NewTimeEntry.Task = Task;
            NewTimeEntry.User = Task.Assignee;
            Task.TimeEntries.Add(NewTimeEntry);
            TimeEntriesService.AddAsync(NewTimeEntry);
        }
        
        NewTimeEntry = new TimeEntry();
        ToggleOpenHoursForm();
    }

    private void AddComment()
    {
        NewCommentHasErrors = string.IsNullOrWhiteSpace(NewCommentText);
        if (NewCommentHasErrors) return;

        Task.Comments.Add(new CommentDto() { TimeStamp = DateTime.Now, Comment = NewCommentText });
        Task.Comments = Task.Comments.OrderByDirection(CommentsSortDirection, userComment => userComment.TimeStamp).ToList();
        NewCommentText = "";
    }
}