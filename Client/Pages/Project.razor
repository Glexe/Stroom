@page "/projects/{ProjectName}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Stroom.Shared
@using Stroom.Shared.Models
@using static Stroom.Shared.Enums.BugPropertiesEnums
@attribute [Authorize]
@inject HttpClient Http

<PageTitle>@ProjectName</PageTitle>

<div style="@(!IsOpen ? "visibility: hidden; width: 0; height: 0;" : "")">
    <BugForm @bind-Bug="Issue" />
    <MudStack Row="true" Class="mt-4">
        <MudButton OnClick="Cancel" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Error">Cancel</MudButton>
        <MudButton OnClick="Save" StartIcon="@Icons.Material.Filled.Save" Color="Color.Primary">Save</MudButton>
    </MudStack>
</div>

<MudStack Style="@(IsOpen ? "visibility: hidden;" : "")">
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.subtitle2">@ProjectName / Task ID - @Issue.IssueID</MudText>
        <span>
            <MudText Class="d-inline" Style="font-weight: 500;" Typo="Typo.h5">@Issue.Name</MudText>
            <div style="float: right;">
                <MudButton OnClick="ToggleOpen">Edit</MudButton>
                <MudButton>Add hours</MudButton>
            </div>
        </span>
        <MudDivider Class="my-3"/>
        <MudStack Row="true" Spacing="4">
            <MudItem Style="width: 40%; float: left;">
                <MudStack Spacing="4">
                    <MudStack Row="true" Spacing="8">
                        <MudText Typo="Typo.body2" Style="@($"color:{Colors.Grey.Lighten1}; min-width: 105px;")">Status:</MudText>
                        <MudText Typo="Typo.body2">@Issue.Status</MudText>
                    </MudStack>
                    <MudStack Row="true" Spacing="8">
                        <MudText Typo="Typo.body2" Style="@($"color:{Colors.Grey.Lighten1}; min-width: 105px;")">Priority:</MudText>
                        <MudText Typo="Typo.body2" >@Issue.Priority</MudText>
                    </MudStack>
                    <MudStack Row="true" Spacing="8">
                        <MudText Typo="Typo.body2" Style="@($"color:{Colors.Grey.Lighten1}; min-width: 105px;")">Owner:</MudText>
                        <MudText Typo="Typo.body2">@Issue.Owner</MudText>
                    </MudStack>
                    <MudStack Row="true" Spacing="8">
                        <MudText Typo="Typo.body2" Style="@($"color:{Colors.Grey.Lighten1}; min-width: 105px;")">Assignee:</MudText>
                        <MudText Typo="Typo.body2">@Issue.Assignee</MudText>
                    </MudStack>
                </MudStack>
            </MudItem>
            <MudItem Style="width: 60%; float: right;">
                <MudStack Spacing="4">
                    <MudStack Row="true" Spacing="8">
                        <MudText Typo="Typo.body2" Style="@($"color:{Colors.Grey.Lighten1}; min-width: 105px;")">Submition Date:</MudText>
                        <MudText Typo="Typo.body2">@Issue.SubmitionDate?.ToShortDateString()</MudText>
                    </MudStack>
                    <MudStack Row="true" Spacing="8">
                        <MudText Typo="Typo.body2" Style="@($"color:{Colors.Grey.Lighten1}; min-width: 105px;")">Due Date:</MudText>
                        <MudText Typo="Typo.body2">@Issue.DueDate?.ToShortDateString()</MudText>
                    </MudStack>
                    <MudStack Row="true" Spacing="8">
                        <MudText Typo="Typo.body2" Style="@($"color:{Colors.Grey.Lighten1}; min-width: 105px;")">Estimated Time:</MudText>
                        <MudText Typo="Typo.body2">@Issue.EstimatedTime h</MudText>
                    </MudStack> 
                    <MudStack Row="true" Spacing="8">
                        <MudText Typo="Typo.body2" Style="@($"color:{Colors.Grey.Lighten1}; min-width: 105px;")">Worked Time:</MudText>
                        <MudText Typo="Typo.body2">@Issue.WorkedTime h</MudText>
                    </MudStack>
                </MudStack>
            </MudItem>
        </MudStack>

        <MudDivider Class="my-3" />
        <MudStack>
            <MudText Typo="Typo.body2" Style="@($"color:{Colors.Grey.Lighten1}; min-width: 105px;")">Description:</MudText>
            <MudText Typo="Typo.body2">@Issue.Description h</MudText>
        </MudStack>
    </MudPaper>

    <button class="btn btn-primary" @onclick="FlipSortDirection">New at the <b>@(OrderCommentsDescending ? "Top" : "Bottom")</b></button>
    @for (var i = 0; i < UserComments.Count; i++)
    {
        var userComment = UserComments[i];
        var commentNumber = OrderCommentsDescending ? UserComments.Count - i : i + 1;
        <MudPaper Class="pa-4">
            <span class="width: 100%;">
                <MudText Typo="Typo.caption">#@commentNumber @userComment.User.Name @userComment.User.Surname</MudText>
                <MudText Typo="Typo.caption" Style="float: right;">@userComment.TimeStamp.ToString("dd-MM-yyyy H:mm")</MudText>
            </span>
            <MudText Typo="Typo.body1">@userComment.Comment</MudText>
        </MudPaper>
    }
</MudStack>

@code {
    [Parameter]
    public string ProjectName { get; set; }
    private Issue Issue { get; set; }
    private List<UserComment> UserComments;
    private UserComment _UserComment;
    public bool IsOpen { get; set; } = false;

    private bool OrderCommentsDescending = true;
    private SortDirection CommentsSortDirection => OrderCommentsDescending ? SortDirection.Descending : SortDirection.Ascending;


    protected override async Task OnInitializedAsync()
    {
        var userComment = new UserComment();

        _UserComment = userComment;
        Issue = userComment.Issue;
        UserComments = new List<UserComment>()
        {
            new UserComment(),
            new UserComment(),
            new UserComment(),
            new UserComment(){ TimeStamp = new DateTime(2021, 05, 14, 19, 06, 12), Comment = "excepteur aliquip cupidatat aliquip occaecat consectetur ex. Non culpa" },
            new UserComment(){ TimeStamp = new DateTime(2022, 07, 02, 08, 17, 12) }
        }.OrderByDirection(CommentsSortDirection, userComment => userComment.TimeStamp).ToList();
    }

    private void FlipSortDirection(){
        OrderCommentsDescending = !OrderCommentsDescending;
        UserComments = UserComments.OrderByDirection(CommentsSortDirection, userComment => userComment.TimeStamp).ToList();
    }

    private void ToggleOpen() 
    {
        IsOpen = !IsOpen; 
    }

    private void Cancel()
    {
        ToggleOpen();
    }

    private void Save()
    {
        //Save bug changes
        ToggleOpen();
    }
}