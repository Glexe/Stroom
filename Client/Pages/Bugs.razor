@page "/bugs"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Stroom.Shared
@using Stroom.Shared.Enums
@using Stroom.Shared.Models
@using static Stroom.Shared.Enums.BugPropertiesEnums
@attribute [Authorize]
@inject HttpClient Http

<PageTitle>Bugs</PageTitle>

<style>
    .flex-bottom{
        display: flex;
        align-items: flex-end;
    }
</style>

<MudExpansionPanels MultiExpansion="true">
    <div class="d-flex mb-4" style="justify-content: space-between;">
	    <MudButton Style="cursor: pointer; font-weight: bold;" OnClick="@ToggleOpen">
	    	@SelectedProjectName
        <MudIcon Icon="@(_isOpen ? Icons.Filled.KeyboardArrowUp : Icons.Filled.KeyboardArrowDown)" />
	    <MudPopover Open="@_isOpen" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
	    	<div class="d-flex flex-column pa-1">
                <MudButton Style="@(ShowAllProject ? "font-weight: bold;" : "font-weight: 400;")" OnClick="@(e => SelectProject(AllProjectsButtonText))">@AllProjectsButtonText</MudButton>
                <MudDivider Style="background-color: black;" />
                @foreach(var projectName in ProjectNames)
                {
                    <MudButton Style="@(SelectedProjectName == projectName ? "font-weight: bold;" : "font-weight: 400;")" OnClick="@(e => SelectProject(projectName))">@projectName</MudButton>
                }
	    	</div>
	    </MudPopover>
	    </MudButton>

        <MudStack Row="true" Style="align-items: center;" Spacing="0">
            <MudText Style="@(AssignedToMeOnly ? "font-weight: 400;" : "font-weight: 500;")">All tasks</MudText>
            <MudSwitch @bind-Checked="@AssignedToMeOnly" Color="Color.Primary" Style="margin-left: 0 !important; margin-inline-end: 0 !important;"></MudSwitch>
            <MudText Style="@(AssignedToMeOnly ? "font-weight: 500;" : "font-weight: 400;")">Assigned to me</MudText>
        </MudStack>
    </div>
    @foreach(var statusName in BugPropertiesEnums.BugStatuses)
    {
        var issuesFiltered = Issues.Where(i => i.Status == statusName && ((SelectedProjectName == AllProjectsButtonText) || (SelectedProjectName != AllProjectsButtonText && i.Project.Name == SelectedProjectName)) && ((!AssignedToMeOnly) || (AssignedToMeOnly && i.Assignee == CurrentUserName))).ToList();
        var issuesCount = issuesFiltered.Count;
        if (issuesCount < 1) continue;

        <MudExpansionPanel Class="mb-3">
             <TitleContent>
                    <div class="flex-bottom">
                        <MudIcon Icon="@Icons.Filled.KeyboardArrowDown" class="mr-3"></MudIcon>
                        <MudText class="mr-3" Style="font-weight: 500;">@statusName</MudText>
                        <MudText Typo="Typo.caption">@issuesCount tasks</MudText>
                    </div>
                </TitleContent>
            <ChildContent>
                <MudSimpleTable Style="overflow-x: auto; box-shadow: none;">
                    <thead>
                        <tr>
                            <th>Project</th>
                            <th>IssueID</th>
                            <th>Name</th>
                            <th>Priority</th>
                            <th>Status</th>
                            <th>EstimatedTime</th>
                            <th>WorkedTime</th>
                            <th>DueDate</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var issue in issuesFiltered)
                        {
                            <tr>
                                <td>@issue.Project.Name</td>
                                <td>@issue.IssueID</td>
                                <td><a href="project/new" Style="font-weight: 500; color: blue;">@issue.Name</a></td>
                                <td>@issue.Priority</td>
                                <td>@issue.Status</td>
                                <td>@issue.EstimatedTime</td>
                                <td>@issue.WorkedTime</td>
                                <td>@issue.DueDate?.ToShortDateString()</td>
                            </tr>
                        }
                    </tbody>
                </MudSimpleTable>
            </ChildContent>
        </MudExpansionPanel>
    }

    <MudButton>Add new task</MudButton>
</MudExpansionPanels>


@code {
    private readonly string AllProjectsButtonText = "All projects";
    private readonly int CurrentPage = 1;
    private readonly int RowsPerPage = 10;

    
    private bool AssignedToMeOnly = false;

    private string CurrentUserName = "Emma Wills"; //todo: parse somehow current user name
    private string SearchString = "";

    private int PagesCount => (int) (Math.Ceiling(((double)Issues.Count() / (double)RowsPerPage)));

    private IEnumerable<Issue> Issues = new List<Issue>();
    private IEnumerable<string> ProjectNames => Issues.Select(i => i.Project.Name).Distinct().ToList();
    private bool ShowAllProject = true;
    private string SelectedProjectName = "All projects";


    protected override async Task OnInitializedAsync()
    {
        Issues = new List<Issue> { new Issue() { Status = BugStatus.New, Assignee = "Hlib Pivniev" }, new Issue() { Status = BugStatus.New }, new Issue() { Status = BugStatus.New, Project = new Stroom.Shared.Models.ProjectDto() { Name = "test" } }, new Issue() { Status = BugStatus.Ongoing }, new Issue() { Status = BugStatus.Ongoing }, new Issue() { Status = BugStatus.Ongoing }, new Issue() { Status = BugStatus.Ongoing }, new Issue() { Status = BugStatus.Completed }, new Issue(), new Issue(), new Issue(){Name = "test 2nd page"}, new Issue() };
    }

    public bool _isOpen;

    public void ToggleOpen()
    {
        if (_isOpen)
            _isOpen = false;
        else
            _isOpen = true;
    }

    public void SelectProject(string projectName)
    {
        ShowAllProject = (projectName == "All projects");
        SelectedProjectName = projectName;
        _isOpen = false;
    }

    private bool FilterFunc(Issue issue)
    {
        if (string.IsNullOrWhiteSpace(SearchString))
            return true;
        if (issue.Name.Contains(SearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (issue.IssueID.ToString().Contains(SearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}