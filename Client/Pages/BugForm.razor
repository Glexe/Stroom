@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Stroom.Client.Services
@using Stroom.Shared
@using Stroom.Shared.Models
@using Stroom.Shared.Enums
@using static Stroom.Shared.Enums.BugPropertiesEnums
@inject HttpClient Http
@inject IProjectsService ProjectsService

<style>
    /*overriding framework class*/
    .mud-tooltip-root{
        width: 100% !important;
    }
</style>

<MudStack>
    <MudStack>
    <MudPaper Class="pa-4">
        <MudTextField Required="true" Class="d-inline" Style="font-weight: 500;" Typo="Typo.h5" @bind-Value="Bug.Name" Immediate="true" Label="Name"/>
        <MudStack Row="true" Spacing="8">
            <MudSelect Required="true" T="ProjectDto" @bind-Value="Bug.Project" Label="Project" AnchorOrigin="Origin.BottomCenter">
            @{
                if(Projects != null && Projects.Any())
                { 
                    foreach (var project in Projects)
                    {
                                <MudSelectItem Value="@project" />
                    }
                }
            }
            </MudSelect>
        </MudStack>

        <MudDivider Class="my-3"/>

        <MudStack Row="true" Spacing="4">
            <MudItem Style="width: 50%; float: left;">
                <MudStack Spacing="4">
                    <MudSelect Required="true" T="BugStatus" @bind-Value="Bug.Status" Label="Status" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var bugStatus in BugPropertiesEnums.BugStatuses)
                        {
                            <MudSelectItem Value="@bugStatus" />
                        }
                    </MudSelect>
                    <MudSelect Required="true" T="BugPriority" @bind-Value="Bug.Priority" Label="Priority" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var bugPriority in BugPropertiesEnums.BugPriorities)
                        {
                            <MudSelectItem Value="@bugPriority" />
                        }
                    </MudSelect>
                    <MudSelect Required="true" T="string" @bind-Value="Bug.Assignee" Label="Assignee" AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem Value="@("<Me>")" />
                        <MudSelectItem Value="@("John H.")" />
                        <MudSelectItem Value="@("Mia R.")" />
                    </MudSelect>
                </MudStack>
            </MudItem>
            <MudItem Style="width: 50%; float: right;">
                <MudStack Spacing="4">
                    <MudDatePicker Required="true" @bind-Date="Bug.SubmitionDate" Label="Submition Date" DisableToolbar="true" />
                    <MudDatePicker Required="true" @bind-Date="Bug.DueDate" Label="Due Date" DisableToolbar="true" />
                    <span style="width: 100% !important;">
                        <MudTooltip Color="Color.Transparent" Placement="Placement.Bottom">
                            <ChildContent>
                                <MudNumericField Required="true" @bind-Value="Bug.EstimatedTime" Label="Estimated Time" Variant="Variant.Text" Min="1" Max="99999" />
                            </ChildContent>
                            <TooltipContent>
                                <MudAlert Severity="Severity.Info" Dense="true">Tip: Use shift + mouse wheel to adjust the number</MudAlert>
                            </TooltipContent>
                        </MudTooltip>
                    </span>
                </MudStack>
            </MudItem>
        </MudStack>

        <MudDivider Class="my-3" />
        <MudStack>
            <MudTextField Class="d-inline" @bind-Value="Bug.Description" Immediate="true" Label="Description" Lines="4" />
        </MudStack>
    </MudPaper>
    </MudStack>
</MudStack>

@code {
    private Issue _Bug = new Issue();
    [Parameter]
    public Issue Bug 
    {
        get => _Bug;
        set
        {
            if (_Bug == value) return;

            _Bug = value;
            BugChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<Issue> BugChanged { get; set; }

    private ProjectDto[]? Projects { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Projects = await ProjectsService.GetAsync();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}